
LED_pattern_V02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000460  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000004d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d2  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e4  00000000  00000000  00001ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000026d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047a  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000031a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  74:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SETPINDIR>:
/******************************************************************/
PinDirection_t DIO_SETPINDIR(uint8_t portID , uint8_t pinID , uint8_t dir)
{
	PinDirection_t Local_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(dir) /** SWITCH CASE ON THE DIRECTION VALUE **/
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <DIO_SETPINDIR+0xa>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	e9 f1       	breq	.+122    	; 0xfe <DIO_SETPINDIR+0x82>
  84:	74 c0       	rjmp	.+232    	; 0x16e <DIO_SETPINDIR+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(portID) /** SWITCH CASE ON THE PORT ID */
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	99 f0       	breq	.+38     	; 0xb0 <DIO_SETPINDIR+0x34>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SETPINDIR+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	e9 f0       	breq	.+58     	; 0xca <DIO_SETPINDIR+0x4e>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	41 f1       	breq	.+80     	; 0xe4 <DIO_SETPINDIR+0x68>
  94:	6e c0       	rjmp	.+220    	; 0x172 <DIO_SETPINDIR+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , pinID);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SETPINDIR+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SETPINDIR+0x22>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
  ac:	80 e0       	ldi	r24, 0x00	; 0
			break;
  ae:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , pinID);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
  b0:	27 b3       	in	r18, 0x17	; 23
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_SETPINDIR+0x40>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_SETPINDIR+0x3c>
  c0:	80 95       	com	r24
  c2:	82 23       	and	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
  c6:	80 e0       	ldi	r24, 0x00	; 0
			break;
  c8:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , pinID);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
  ca:	24 b3       	in	r18, 0x14	; 20
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_SETPINDIR+0x5a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_SETPINDIR+0x56>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	84 bb       	out	0x14, r24	; 20
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
  e0:	80 e0       	ldi	r24, 0x00	; 0
			break;
  e2:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , pinID);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
  e4:	21 b3       	in	r18, 0x11	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SETPINDIR+0x74>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SETPINDIR+0x70>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	81 bb       	out	0x11, r24	; 17
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
  fa:	80 e0       	ldi	r24, 0x00	; 0
			break;
  fc:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(portID) /** SWITCH CASE ON THE PORT ID */
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	91 f0       	breq	.+36     	; 0x126 <DIO_SETPINDIR+0xaa>
 102:	28 f0       	brcs	.+10     	; 0x10e <DIO_SETPINDIR+0x92>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	d9 f0       	breq	.+54     	; 0x13e <DIO_SETPINDIR+0xc2>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	29 f1       	breq	.+74     	; 0x156 <DIO_SETPINDIR+0xda>
 10c:	34 c0       	rjmp	.+104    	; 0x176 <DIO_SETPINDIR+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , pinID);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 10e:	2a b3       	in	r18, 0x1a	; 26
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_SETPINDIR+0x9e>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_SETPINDIR+0x9a>
 11e:	82 2b       	or	r24, r18
 120:	8a bb       	out	0x1a, r24	; 26
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
 122:	80 e0       	ldi	r24, 0x00	; 0
			break;
 124:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , pinID);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 126:	27 b3       	in	r18, 0x17	; 23
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SETPINDIR+0xb6>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SETPINDIR+0xb2>
 136:	82 2b       	or	r24, r18
 138:	87 bb       	out	0x17, r24	; 23
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
 13a:	80 e0       	ldi	r24, 0x00	; 0
			break;
 13c:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , pinID);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SETPINDIR+0xce>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SETPINDIR+0xca>
 14e:	82 2b       	or	r24, r18
 150:	84 bb       	out	0x14, r24	; 20
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
 152:	80 e0       	ldi	r24, 0x00	; 0
			break;
 154:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , pinID);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SETPINDIR+0xe6>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SETPINDIR+0xe2>
 166:	82 2b       	or	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
 16a:	80 e0       	ldi	r24, 0x00	; 0
			break;
 16c:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		Local_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
			clear_bit(DDRD , pinID);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
			break;
			
			default: /** DO NOTHING **/
			Local_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	08 95       	ret
			set_bit(DDRD , pinID);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			Local_dirstate = VALID_DIRECTION ; /** RETURN AS DIR NO ERRORS **/
			break;
			
			default:  /** DO NOTHING **/
			Local_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 176:	81 e0       	ldi	r24, 0x01	; 1
		Local_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return Local_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 178:	08 95       	ret

0000017a <DIO_SETPINVAL>:
PinValue_t DIO_SETPINVAL(uint8_t portID , uint8_t pinID , uint8_t val)
{
	
	PinValue_t Local_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(val)
 17a:	44 23       	and	r20, r20
 17c:	19 f0       	breq	.+6      	; 0x184 <DIO_SETPINVAL+0xa>
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	e9 f1       	breq	.+122    	; 0x1fc <DIO_SETPINVAL+0x82>
 182:	74 c0       	rjmp	.+232    	; 0x26c <DIO_SETPINVAL+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(portID)  /** SWITCH CASE ON THE PORT ID */ 
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	99 f0       	breq	.+38     	; 0x1ae <DIO_SETPINVAL+0x34>
 188:	28 f0       	brcs	.+10     	; 0x194 <DIO_SETPINVAL+0x1a>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	e9 f0       	breq	.+58     	; 0x1c8 <DIO_SETPINVAL+0x4e>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	41 f1       	breq	.+80     	; 0x1e2 <DIO_SETPINVAL+0x68>
 192:	6e c0       	rjmp	.+220    	; 0x270 <DIO_SETPINVAL+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , pinID);       /** SET THIS PIN AS LOW **/
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SETPINVAL+0x26>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SETPINVAL+0x22>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 1aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1ac:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , pinID);       /** SET THIS PIN AS LOW **/
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SETPINVAL+0x40>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SETPINVAL+0x3c>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	88 bb       	out	0x18, r24	; 24
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 1c4:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1c6:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , pinID);       /** SET THIS PIN AS LOW **/
 1c8:	25 b3       	in	r18, 0x15	; 21
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SETPINVAL+0x5a>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SETPINVAL+0x56>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	85 bb       	out	0x15, r24	; 21
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 1de:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1e0:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , pinID);       /** SET THIS PIN AS LOW **/
 1e2:	22 b3       	in	r18, 0x12	; 18
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SETPINVAL+0x74>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SETPINVAL+0x70>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	82 bb       	out	0x12, r24	; 18
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 1f8:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1fa:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(portID)
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	91 f0       	breq	.+36     	; 0x224 <DIO_SETPINVAL+0xaa>
 200:	28 f0       	brcs	.+10     	; 0x20c <DIO_SETPINVAL+0x92>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	d9 f0       	breq	.+54     	; 0x23c <DIO_SETPINVAL+0xc2>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	29 f1       	breq	.+74     	; 0x254 <DIO_SETPINVAL+0xda>
 20a:	34 c0       	rjmp	.+104    	; 0x274 <DIO_SETPINVAL+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , pinID);         /** SET THIS PIN AS HIGH  **/
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SETPINVAL+0x9e>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SETPINVAL+0x9a>
 21c:	82 2b       	or	r24, r18
 21e:	8b bb       	out	0x1b, r24	; 27
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 220:	80 e0       	ldi	r24, 0x00	; 0
			break;
 222:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , pinID);         /** SET THIS PIN AS HIGH  **/
 224:	28 b3       	in	r18, 0x18	; 24
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SETPINVAL+0xb6>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_SETPINVAL+0xb2>
 234:	82 2b       	or	r24, r18
 236:	88 bb       	out	0x18, r24	; 24
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 238:	80 e0       	ldi	r24, 0x00	; 0
			break;
 23a:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , pinID);         /** SET THIS PIN AS HIGH  **/
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SETPINVAL+0xce>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SETPINVAL+0xca>
 24c:	82 2b       	or	r24, r18
 24e:	85 bb       	out	0x15, r24	; 21
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 250:	80 e0       	ldi	r24, 0x00	; 0
			break;
 252:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , pinID);         /** SET THIS PIN AS HIGH  **/
 254:	22 b3       	in	r18, 0x12	; 18
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_SETPINVAL+0xe6>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_SETPINVAL+0xe2>
 264:	82 2b       	or	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
 268:	80 e0       	ldi	r24, 0x00	; 0
			break;
 26a:	08 95       	ret
			break;
		} 
		break;
		
		default :
		Local_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	08 95       	ret
			clear_bit(PORTD , pinID);       /** SET THIS PIN AS LOW **/
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
			break;
			
			default:
			Local_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
			set_bit(PORTD , pinID);         /** SET THIS PIN AS HIGH  **/
			Local_valstate = VALID_VALUE ;  /** RETURN VALUE AS VALID **/
			break;
			
			default:
			Local_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 274:	81 e0       	ldi	r24, 0x01	; 1
		Local_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return Local_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 276:	08 95       	ret

00000278 <INT0_INIT>:
/********************************************************/
void INT0_INIT(void)
{
	//SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
	
	set_bit(SREG , 7);
 278:	8f b7       	in	r24, 0x3f	; 63
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	8f bf       	out	0x3f, r24	; 63
	
	
	/** CONFIGURE THE INT0 TRIGGER EVENT **/
	#if  EXTERNAL_INT0_TRIGGER   ==  INT_TRIGGER_RISING_EDGE 
	
	  set_bit(MCUCR , 0);
 27e:	85 b7       	in	r24, 0x35	; 53
 280:	81 60       	ori	r24, 0x01	; 1
 282:	85 bf       	out	0x35, r24	; 53
	  set_bit(MCUCR , 1);
 284:	85 b7       	in	r24, 0x35	; 53
 286:	82 60       	ori	r24, 0x02	; 2
 288:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
 28a:	8b b7       	in	r24, 0x3b	; 59
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	8b bf       	out	0x3b, r24	; 59
 290:	08 95       	ret

00000292 <LED_INIT>:
/** RETURNS : VOID                                **/
/***************************************************/
void LED_INIT(uint8_t led_port , uint8_t ledpin)
{
	
	DIO_SETPINDIR(led_port , ledpin , DIO_PIN_OUTPUT); /** SET THE LED PIN AS OUTPUT **/
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SETPINDIR>
 298:	08 95       	ret

0000029a <LED_ON>:
/** RETURNS : VOID                                **/
/***************************************************/
void LED_ON(uint8_t led_port , uint8_t ledpin)
{
	
	DIO_SETPINVAL(led_port , ledpin , DIO_PIN_HIGH); /** SET THE OUTPUT PIN AS HIGH **/
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SETPINVAL>
 2a0:	08 95       	ret

000002a2 <LED_OFF>:
/** RETURNS : VOID                                **/
/***************************************************/
void LED_OFF(uint8_t led_port , uint8_t ledpin)
{
	
	DIO_SETPINVAL(led_port , ledpin , DIO_PIN_LOW); /** SET THE OUTPUT PIN AS LOW **/
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SETPINVAL>
 2a8:	08 95       	ret

000002aa <main>:
uint8_t press = 0 ;

int main(void)
{
	
	DIO_SETPINDIR(DIO_PORTD , DIO_PIN2 , DIO_PIN_INPUT); /** SET INT0 PIN AS INPUT PIN **/
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	62 e0       	ldi	r22, 0x02	; 2
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SETPINDIR>
	
	DIO_SETPINVAL(DIO_PORTD , DIO_PIN2 , DIO_PIN_LOW);
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SETPINVAL>
	
	/** CONFIGURE THE PINS **/
	LED_INIT(LED1_PORT , LED1_PIN);
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 49 01 	call	0x292	; 0x292 <LED_INIT>
	LED_INIT(LED2_PORT , LED2_PIN);
 2c6:	67 e0       	ldi	r22, 0x07	; 7
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 49 01 	call	0x292	; 0x292 <LED_INIT>
	LED_INIT(LED3_PORT , LED3_PIN);
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 49 01 	call	0x292	; 0x292 <LED_INIT>
	LED_INIT(LED4_PORT , LED4_PIN);
 2d6:	64 e0       	ldi	r22, 0x04	; 4
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 49 01 	call	0x292	; 0x292 <LED_INIT>
	
	/** LEDS ARE INITIALLY OFF **/
	LED_OFF(LED1_PORT , LED1_PIN);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
	LED_OFF(LED2_PORT , LED2_PIN);
 2e6:	67 e0       	ldi	r22, 0x07	; 7
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
	LED_OFF(LED3_PORT , LED3_PIN);
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
	LED_OFF(LED4_PORT , LED4_PIN);
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
	
	
	INT0_INIT();
 2fe:	0e 94 3c 01 	call	0x278	; 0x278 <INT0_INIT>
	
    /* Replace with your application code */
    while (1) 
    {
		if (press == 1)
 302:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	89 f4       	brne	.+34     	; 0x32c <main+0x82>
		{
			LED_ON(LED1_PORT , LED1_PIN);
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_OFF(LED2_PORT , LED2_PIN);
 312:	67 e0       	ldi	r22, 0x07	; 7
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED3_PORT , LED3_PIN);
 31a:	63 e0       	ldi	r22, 0x03	; 3
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED4_PORT , LED4_PIN);
 322:	64 e0       	ldi	r22, 0x04	; 4
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
 32a:	eb cf       	rjmp	.-42     	; 0x302 <main+0x58>
		}
		
		else if (press == 2 )
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	81 f4       	brne	.+32     	; 0x350 <main+0xa6>
		{
			LED_ON(LED1_PORT , LED1_PIN);
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED2_PORT , LED2_PIN);
 336:	67 e0       	ldi	r22, 0x07	; 7
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_OFF(LED3_PORT , LED3_PIN);
 33e:	63 e0       	ldi	r22, 0x03	; 3
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED4_PORT , LED4_PIN);
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
 34e:	d9 cf       	rjmp	.-78     	; 0x302 <main+0x58>
		}
		
		else if (press == 3)
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	89 f4       	brne	.+34     	; 0x376 <main+0xcc>
		{
			LED_ON(LED1_PORT , LED1_PIN);
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED2_PORT , LED2_PIN);
 35c:	67 e0       	ldi	r22, 0x07	; 7
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED3_PORT , LED3_PIN);
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_OFF(LED4_PORT , LED4_PIN);
 36c:	64 e0       	ldi	r22, 0x04	; 4
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
 374:	c6 cf       	rjmp	.-116    	; 0x302 <main+0x58>
		}
		
		else if (press == 4)
 376:	84 30       	cpi	r24, 0x04	; 4
 378:	89 f4       	brne	.+34     	; 0x39c <main+0xf2>
		{
			LED_ON(LED1_PORT , LED1_PIN);
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED2_PORT , LED2_PIN);
 382:	67 e0       	ldi	r22, 0x07	; 7
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED3_PORT , LED3_PIN);
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED4_PORT , LED4_PIN);
 392:	64 e0       	ldi	r22, 0x04	; 4
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
 39a:	b3 cf       	rjmp	.-154    	; 0x302 <main+0x58>
		}
		
		else if (press == 5)
 39c:	85 30       	cpi	r24, 0x05	; 5
 39e:	89 f4       	brne	.+34     	; 0x3c2 <main+0x118>
		{
			LED_OFF(LED1_PORT , LED1_PIN);
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_ON(LED2_PORT , LED2_PIN);
 3a8:	67 e0       	ldi	r22, 0x07	; 7
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED3_PORT , LED3_PIN);
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED4_PORT , LED4_PIN);
 3b8:	64 e0       	ldi	r22, 0x04	; 4
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
 3c0:	a0 cf       	rjmp	.-192    	; 0x302 <main+0x58>
		}
		
		else if (press == 6)
 3c2:	86 30       	cpi	r24, 0x06	; 6
 3c4:	89 f4       	brne	.+34     	; 0x3e8 <main+0x13e>
		{
			LED_OFF(LED1_PORT , LED1_PIN);
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED2_PORT , LED2_PIN);
 3ce:	67 e0       	ldi	r22, 0x07	; 7
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_ON(LED3_PORT , LED3_PIN);
 3d6:	63 e0       	ldi	r22, 0x03	; 3
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
			LED_ON(LED4_PORT , LED4_PIN);
 3de:	64 e0       	ldi	r22, 0x04	; 4
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
 3e6:	8d cf       	rjmp	.-230    	; 0x302 <main+0x58>
		}
		
		else if (press == 7)
 3e8:	87 30       	cpi	r24, 0x07	; 7
 3ea:	89 f4       	brne	.+34     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			LED_OFF(LED1_PORT , LED1_PIN);
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED2_PORT , LED2_PIN);
 3f4:	67 e0       	ldi	r22, 0x07	; 7
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED3_PORT , LED3_PIN);
 3fc:	63 e0       	ldi	r22, 0x03	; 3
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_ON(LED4_PORT , LED4_PIN);
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	0e 94 4d 01 	call	0x29a	; 0x29a <LED_ON>
 40c:	7a cf       	rjmp	.-268    	; 0x302 <main+0x58>
		}
		
		else if (press == 8)
 40e:	88 30       	cpi	r24, 0x08	; 8
 410:	09 f0       	breq	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	77 cf       	rjmp	.-274    	; 0x302 <main+0x58>
		{
			LED_OFF(LED1_PORT , LED1_PIN);
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED2_PORT , LED2_PIN);
 41c:	67 e0       	ldi	r22, 0x07	; 7
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED3_PORT , LED3_PIN);
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			LED_OFF(LED4_PORT , LED4_PIN);
 42c:	64 e0       	ldi	r22, 0x04	; 4
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_OFF>
			
			press = 0 ;  /** REINITIALIZE PRESS TO 0 AGAIN **/
 434:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 438:	64 cf       	rjmp	.-312    	; 0x302 <main+0x58>

0000043a <__vector_1>:
		}
    }
}

ISR(INT0_vect)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	8f 93       	push	r24
	press++;  /** EACH INTERRUPT TRIGGER INCREASE PRESS BY 1 **/
 446:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 450:	8f 91       	pop	r24
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
